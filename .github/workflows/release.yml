name: Release

on:
  push:
    tags:
      - 'v*'
    branches:
      - 'release/*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || startsWith(github.ref, 'refs/heads/release/')
    
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Extract version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/release/* ]]; then
            VERSION=$(cat VERSION 2>/dev/null || echo "v0.1.0")
            if [[ ! $VERSION =~ ^v ]]; then
              VERSION="v${VERSION}"
            fi
          else
            VERSION="${{ github.event.inputs.tag }}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT
      
      - name: Check if release exists
        id: check_release
        run: |
          if gh release view ${{ steps.version.outputs.version }} >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Validate imports
        if: steps.check_release.outputs.exists == 'false'
        run: |
          python -c "
          from src.embedding_provider import get_embed_model_from_env
          from src.llamaindex_processor import RAGEngine
          print('✅ Release validation passed')
          " || echo "⚠️ Import validation failed but continuing release"
      
      - name: Generate release notes
        if: steps.check_release.outputs.exists == 'false'
        id: release_notes
        run: |
          if [ -f RELEASE_NOTES.md ]; then
            echo "notes_file=RELEASE_NOTES.md" >> $GITHUB_OUTPUT
          elif [ -f CHANGELOG.md ]; then
            echo "notes_file=CHANGELOG.md" >> $GITHUB_OUTPUT
          else
            # Generate basic release notes
            cat > release_notes.md << EOF
          # Release ${{ steps.version.outputs.version }}
          
          ## What's Changed
          - Dynamic embedding provider system
          - Support for OpenAI and DashScope providers
          - Runtime provider switching
          - Enhanced configuration options
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v0.0.0...${{ steps.version.outputs.version }}
          EOF
            echo "notes_file=release_notes.md" >> $GITHUB_OUTPUT
          fi
      
      - name: Create GitHub Release
        if: steps.check_release.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: "${{ steps.version.outputs.version }}: Dynamic Embedding Provider System"
          body_path: ${{ steps.release_notes.outputs.notes_file }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create or update tag
        if: steps.check_release.outputs.exists == 'false' && !startsWith(github.ref, 'refs/tags/')
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if ! git tag -l | grep -q "^${{ steps.version.outputs.version }}$"; then
            git tag ${{ steps.version.outputs.version }}
            git push origin ${{ steps.version.outputs.version }}
          fi
      
      - name: Output release info
        run: |
          echo "✅ Release ${{ steps.version.outputs.version }} created successfully!"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}"